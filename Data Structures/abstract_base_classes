from abc import ABC, abstractmethod


class InvalidOperationError(Exception):
    pass


class Stream(ABC):
    def __init__(self):
        self.opened = False

    def open(self):
        if self.opened:
            raise InvalidOperationError("Stream is already open.")
        self.opened = True

    def close(self):
        if not self.opened:
            raise InvalidOperationError("Stream is already close.")
        self.opened = False

    @abstractmethod
    def read(self):
        pass


class FileStream(Stream):
    def read(self):
        print("Reading data from a file")


class NetworkStream(Stream):
    def read(self):
        print("Reading data from a network")


# A decorator is a design pattern in Python that allows a user
#  to add new functionality to an existing object without modifying
#  its structure. Decorators are usually called before the definition
#  of a function you want to decorate.
# A Concrete class is a class that has a definition for all its methods
#  and has no abstract method.

class MemoryStream(Stream):
    def read(self):
        print("Reading data from memory stream.")


stream = MemoryStream()
stream.open()
